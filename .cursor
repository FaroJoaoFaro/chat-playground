# Cursor Configuration for Steve's Chat Playground

# Core Principles
- This project must remain a simple, zero-dependency web application
- All code must run directly in the browser without any build steps
- No external package managers (npm, yarn, etc.) should be used
- No build tools (webpack, rollup, etc.) should be added
- No transpilation or compilation steps should be required
- All application logic and interactivity must be kept in external JavaScript files (not in html) to maintain separation of concerns and best practices
- Keep styling information in CSS and not in HTML

# File Structure Rules
- Keep all files in their current directories
- No new top-level directories should be added
- All assets must be self-contained in the project

# Dependencies
- Only use vanilla JavaScript (ES6+)
- Only use standard web APIs
- No external libraries or frameworks
- No package.json or similar dependency files
- No node_modules directory

# GitHub Pages Requirements
- All code must work directly on GitHub Pages
- No GitHub Actions or build steps
- No server-side processing
- No database requirements
- No API keys in the repository

# Development Rules
- All development should be possible with just a text editor
- Testing should be possible by opening index.html in a browser
- No special development environment setup should be required
- No special IDE configurations needed

# Deployment Rules
- Deployment should be as simple as pushing to GitHub
- No build or compilation steps before deployment
- No special deployment tools or processes
- No CI/CD pipeline requirements

# Performance Rules
- Keep file sizes small
- Minimize HTTP requests
- No large external resources
- No heavy client-side processing

# Pre-Merge Contribution Review Process
- All PRs must be reviewed for adherence to core principles
- Review should verify:
  - Zero-dependency compliance
  - No build steps introduced
  - Vanilla JS/standard web APIs only
  - Consistent with existing patterns
  - Proper error handling
  - Accessibility considerations
- Review comments should be clear and actionable
- Improvements can be suggested as follow-up PRs if core functionality is solid
- Review should be completed before merging to main branch
- PR diffs can be accessed at: https://github.com/virtualsteve-star/chat-playground/pull/{PR_NUMBER}/files

#
# NOTE: When creating or modifying GitHub issues for this project (automatically or manually), always use Markdown formatting for the issue body:
#   - Use real newlines (not \n) for paragraphs and bullet points
#   - Use - or * for bullet lists
#   - Use section headers (## or **) for clarity if needed
#   - Avoid escaped newlines (\n) in the text
# This ensures all issues render cleanly and are easy to read on GitHub. 

## Contribution Documentation
- All external contributions must be documented in VERSION_HISTORY.md
- Credit the original contributor (not the committer) using their GitHub username
- Find contributor information in the PR's "Conversation" tab, under the initial PR description
- Format: "Feature description (PR #XX by @contributor)"
- Example: "Added copy button to chat bubbles (PR #46 by @megahelio)"

## Critical UI Architecture Rules (NEVER BREAK)

### Toolbar Button Structure
All toolbar buttons MUST follow this exact structure:
```html
<button id="your-btn" class="toolbar-button" title="Your Title">
    <span class="button-icon">emoji</span>
</button>
```

**JavaScript Guidelines:**
- ✅ GOOD: `button.querySelector('.button-icon').textContent = 'newEmoji';`
- ❌ NEVER: `button.textContent = 'newEmoji';` (destroys DOM structure)

**Why this matters**: JavaScript that modifies button structure breaks CSS targeting, causing buttons to lose styling and become inconsistent. This has caused major debugging sessions.

### CSS Architecture Rules
- Use CSS custom properties (variables) for all theming in styles/main-optimized.css
- NEVER use `!important` declarations (current count: 0, keep it that way)
- New themes require only 3-5 lines of CSS variable overrides
- All toolbar buttons inherit consistent sizing via `.toolbar-button` class
- Run `node tests/CSSArchitectureTest.js` after any styling changes
- Button structure validation is included in automated tests

### Development Testing
- Always test all 4 themes: Vanilla, iMessage, iMessage Dark, Green Screen
- Verify button emoji sizing is consistent across all toolbar buttons
- Check that guardrails panel spacing is tight (not excessive vertical padding) 